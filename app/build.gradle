apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions' //最新官方已Deprecated，推荐迁移至ViewBinding 需要android studio 3.6

def config = rootProject.ext.ver
def library = rootProject.ext.library

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getDefault())
}

android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId "com.boykinchoi.star"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true //添加多dex分包支持

        //ARouter 必须配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    // AS3.0 自定义APK安装包名
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "bjStar-v${variant.versionName}-${releaseTime()}-${variant.buildType.name}.apk"
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    configurations.all {
        resolutionStrategy {
            // 引用库（这里是TvHandler)里用的更高版本的1.7.0(需要sdk31以上，而当前项目用sdk28) 引起冲突，so 这里固定使用版本1.3.2
            force 'androidx.core:core-ktx:1.3.2'
            resolutionStrategy.eachDependency { details ->
                /*if (details.requested.group == 'androidx.core') {
                   details.useVersion "1.0.1"
               }
                if (details.requested.group == 'androidx.lifecycle') {
                    details.useVersion "2.0.0"
                }*/
                if (details.requested.group == 'androidx.versionedparcelable') {
                    details.useVersion "1.0.0"
                }
                if (details.requested.group == 'androidx.recyclerview:recyclerview') {
                    details.useVersion "1.1.0"
                }
                if (details.requested.group == 'androidx.fragment') {
                    details.useVersion "1.0.0"
                }
                if (details.requested.group == 'androidx.appcompat') {
                    details.useVersion "1.2.0"
                }
            }
        }
    }

    signingConfigs {
        release {
            storeFile file(rootProject.ext.keystorePath)
            storePassword rootProject.ext.keystorePassword
            keyAlias rootProject.ext.alias
            keyPassword rootProject.ext.aliasPassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'HOST_URL', '"http://47.113.108.191:8523/"')
            buildConfigField('String', 'HOST_H5_URL', '"http://test-resource.digitspower.cn/yuedudashi/#"')
            resValue("bool", "is_debug", "true")
            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
            }
            //配置debug包的签名,与发布签名一致，方便测试
            //signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "HOST_URL", '"http://47.113.108.191:8523/"')
            buildConfigField('String', 'HOST_H5_URL', '"http://test-resource.digitspower.cn/yuedudashi/#"')
            resValue("bool", "is_debug", "false")
            ndk {
                abiFilters 'armeabi', 'armeabi-v7a'
            }
            //signingConfig signingConfigs.release
        }
    }

    productFlavors {

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

//    dataBinding {
//        enabled = true
//    }

    viewBinding {
        enabled = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // 代码报Android kotlin AppCompatActivity错误::Cannot access 'androidx.activity.contextaware.ContextAware'
    // which is a supertype of xxx;Cannot access 'androidx.activity.result.ActivityResultCaller'时
    // 引入此库
    implementation "androidx.activity:activity-ktx:1.2.0-beta01"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation project(':baselibrary')
    debugImplementation project(':baselibrary')

    //stateView
    implementation 'com.github.nukc.stateview:library:1.5.4'

    // PS：自定义注解处理器需要创建类型为Java or Kotlin Library的module
    implementation project(':lib_annotation')
    // 注意processor要用annotationProcessor
    annotationProcessor project(':lib_processor')
}
