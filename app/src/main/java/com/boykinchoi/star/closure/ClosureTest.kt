package com.boykinchoi.star.closure

/**
 * - 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），
 * 这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域
 * - 理解1：闭包就是一个函数引用另一个函数内部的变量，因为变量被引用着，所以当另外一个函数执行结束，其相应的执行上下文弹出栈时，
 * 变量并不会被回收，因此可以用来封装一个私有变量。不正当地使用闭包可能会造成内存泄漏
 * - 理解2：本质就是上级作用域内变量的生命周期，因为被下级作用域内引用，而没有被释放。就导致上级作用域内的变量，
 * 等到下级作用域执行完以后才正常得到释放
 * - 理解3：闭包其实也就是一个能够读取其他函数内部变量的函数。
 * @Author: 蔡佰健
 * @Description:
 * @Date:Create：in  2022/7/15 11:11
 */
fun gan() {
    val name = "inter"
    fun doGan() {
        //这里引用了name变量,所以并不会随着销毁，相当于封装了一个私有变量
        println("real gan $name")
    }
    doGan()
}

